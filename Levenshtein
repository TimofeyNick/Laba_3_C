#include <iostream>
#include <string>


int levenshtein(std:: string s_1_tmp, std:: string s_2_tmp, int len_1, int len_2)
{
    int A[len_1][len_2];
    for(int i = 0; i < len_1; i++)
    {
        A[i][0] = i;
    }
    for(int j = 0; j < len_2; j++)
    {
        A[0][j] = j;
    }
    for(int i = 1; i < len_1; i++)
    {
        for(int j = 1; j < len_2; j++)
        {
            int tmp_1 = A[i-1][j] + 1;
            int tmp_2 = A[i][j-1] + 1;
            int cur = 1;
            if (s_1_tmp[i - 1] == s_2_tmp[j - 1])
            {
                cur = 0;
            }
            int tmp_3 = A[i-1][j-1] + cur;
            int min_tmp;
            min_tmp = std::min (std:: min (tmp_1, tmp_2), tmp_3);
            A[i][j] = min_tmp;
        }
    }


    return A[len_1 - 1][len_2 - 1];
}

int main()
{
    std:: string s_1;
    std:: getline(std::cin, s_1);
    std:: string s_2;
    std:: getline(std::cin, s_2);
    int len_1, len_2;
    len_1 = s_1.length();
    len_2 = s_2.length();
    len_1 = len_1 + 1;
    len_2 = len_2 + 1;
    
    int ans;
    ans = levenshtein(s_1, s_2, len_1, len_2);
    std:: cout << ans;
}
